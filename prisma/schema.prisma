// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  name             String
  email            String
  UserCreadentials UserCreadentials[]
  isDeleted        Boolean            @default(false)
  UserSession      UserSession[]
  Role             Role?              @relation(fields: [roleId], references: [id])
  roleId           String?            @db.ObjectId
}

model UserCreadentials {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  password  String
  isDeleted Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model UserSession {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  User      User      @relation(fields: [userId], references: [id])
  userId    String    @db.ObjectId
  token     String?
  otp       String?
  otpRef    String?
  isDeleted Boolean   @default(false)
  expiresAt DateTime?
}

model Role {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String     @unique
  permissions String[]
  users       User[]
  createdAt   DateTime   @default(now())
  isDeleted   Boolean    @default(false)
  Employee    Employee[]
}

model Employee {
  id               String             @id @default(auto()) @map("_id") @db.ObjectId
  firstName        String
  lastName         String
  email            String             @unique
  role             Role               @relation(fields: [roleId], references: [id])
  roleId           String             @db.ObjectId
  department       String
  jobTitle         String
  contactInfo      String
  isDeleted        Boolean            @default(false)
  createdAt        DateTime           @default(now())
  LeaveRequest     LeaveRequest[]
  AttendanceRecord AttendanceRecord[]
}

model LeaveRequest {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @db.ObjectId
  leaveType  String
  startDate  DateTime
  endDate    DateTime
  reason     String
  isDeleted  Boolean  @default(false)
  status     String // pending, approved, rejected
  createdAt  DateTime @default(now())
}

model AttendanceRecord {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  employee   Employee @relation(fields: [employeeId], references: [id])
  employeeId String   @db.ObjectId
  checkIn    DateTime
  checkOut   DateTime
  isDeleted  Boolean  @default(false)
  createdAt  DateTime @default(now())
}
